/*
 *  TLV - Trace Log Visualizer
 *
 *  Copyright (C) 2008,2009 by Embedded and Real-Time Systems Laboratory
 *              Graduate School of Information Science, Nagoya Univ., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 *
 *  @(#) $Id$
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Drawing;

namespace NU.OJL.MPRTOS.TLV.Base
{
    /// <summary>
    /// WindowManagerで使用されるサブウィンドウの情報を管理するクラス
    /// </summary>
    public class SubWindow
    {
        /// <summary>
        /// DockStateが変ったときに発生するイベント
        /// </summary>
        public event EventHandler<GeneralChangedEventArgs<DockState>> DockStateChanged = null;
        /// <summary>
        /// Visibleが変ったときに発生するイベント
        /// </summary>
        public event EventHandler<GeneralChangedEventArgs<bool>> VisibleChanged = null;
        /// <summary>
        /// Enabledが変ったときに発生するイベント
        /// </summary>
        public event EventHandler<GeneralChangedEventArgs<bool>> EnabledChanged = null;

        private string _name = string.Empty;
        private DockState _dockState = DockState.Unknown;
        private bool _visible = true;
        private bool _enabled = true;

        /// <summary>
        /// サブウィンドウにFillされるControl
        /// </summary>
        public Control Control{ get; private set; }
        /// <summary>
        /// ドッキング状態
        /// </summary>
        public DockState DockState
        {
            get { return _dockState; }
            set
            {
                if(_dockState != value)
                {
                    DockState old = _dockState;

                    _dockState = value;

                    if (DockStateChanged != null)
                        DockStateChanged(this, new GeneralChangedEventArgs<DockState>(old, _dockState));
                }
            }
        }
        /// <summary>
        /// サブウィンドウが表示されているかどうかを示す値
        /// </summary>
        public bool Visible
        {
            get { return _visible; }
            set
            {
                if (_visible != value)
                {
                    bool old = _visible;

                    _visible = value;

                    if (VisibleChanged != null)
                        VisibleChanged(this, new GeneralChangedEventArgs<bool>(old, _visible));
                }
            }
        }
        /// <summary>
        /// サブウィンドウの名前。識別子として使われる
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }
        /// <summary>
        /// サブウィンドウのタイトルバーに表示されるテキスト
        /// </summary>
        public string Text { get; set; }
        /// <summary>
        /// サブウィンドウが有効かどうか
        /// </summary>
        public bool Enabled
        {
            get { return _enabled; }
            set
            {
                if(_enabled != value)
                {
                    bool old = _enabled;

                    _enabled = value;

                    if (EnabledChanged != null)
                        EnabledChanged(this, new GeneralChangedEventArgs<bool>(old, _enabled));

                    if (!_enabled && Visible)
                    {
                        Visible = false;
                    }
                }
            }
        }

        /// <summary>
        /// SubWindowのインスタンスを生成
        /// </summary>
        /// <param name="name">サブウィンドウの名前</param>
        /// <param name="control">サブウィンドウにFillされるControl</param>
        /// <param name="dockState">サブウィンドウのドッキング状態</param>
        public SubWindow(string name, Control control, DockState dockState)
        {
            Name = name;
            Text = name;
            Control = control;
            Control.Dock = DockStyle.Fill;
            DockState = dockState;
            Visible = true;
        }

    }

}

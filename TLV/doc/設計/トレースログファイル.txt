SV		task1 exit
SVC		task1.state becomes DORMANT
SVO		task1 terminate task1
SVOC	task1 make task1.state DORMANT


[T]O.B
[T]X:O.B
[T]S:O.B
[T]S:O.A=V

]S. replace ]S:S




[time]TASK1.activate
[time]TASK1:TASK1.activate
[time]TASK1:TASK1.state=RUNNING
[time](name=TASK1):(name=TASK1).state=RUNNING
[time](type=Task,id=1):(type=Task,id=1).state=RUNNING

[time]TASK1:TASK2.activate
[time]TASK1:TASK2.state=RUNNING
[time](name=TASK1):(name=TASK2).state=RUNNING
[time](type=Task,id=1):(type=Task,id=2).state=RUNNING

[正規表現]
@"^\s*\[(?<time>\d+)\][ \t]*(?<S>\w+|\([^\)]+\))[ \t]*:[ \t]*(?<O>\w+|\([^\)]+\)).(?<atr>\w)+[ \t]*=[ \t]*(?<C>\w+)\s*$"
	[time]	⇒ time
	[S] 	⇒ S
	[O]		⇒ O
	[atr]	⇒ atr
	[X] 	⇒ C
S := R
O := R
R := @"\w+/|/\((\w+)[ \t]*=[ \t]*(\w+)(?:,[ \t]*(\w+)[ \t]*=[ \t]*(\w+))*\)"
	[2n-1]	⇒ atr
	[2n]	⇒ value
	


[S,Oがリソース名のとき]
MAINTASK terminate			⇒ MAINTASK : MAINTASK.state = DORMANT	(S exit			⇒ S : S.state = DORMANT )
MAINTASK becomes C			⇒ MAINTASK : MAINTASK.state = C		(S becomes C	⇒ S : S.state = C )
MAINTASK terminates LOGTASK	⇒ MAINTASK : LOGTASK.state = DORMANT	(S terminates O	⇒ S : O.state = DORMANT )
MAINTASK makes LOGTASK C	⇒ MAINTASK : LOGTASK.state = C			(S makes O C	⇒ S : O.state = C )

[S,Oがリソース属性により特定されるとき]
task n terminate			⇒ (type=Task, id=n) : (type=Task, id=n).state = DORMANT
task n becomes C			⇒ (type=Task, id=n) : (type=Task, id=n).state = C
task n terminates task m	⇒ (type=Task, id=n) : (type=Task, id=m).state = DORMANT
task n makes task m C		⇒ (type=Task, id=n) : (type=Task, id=m).state = C


Vic	= becomes
Vtc	= makes
Vi	= exit
Vt	= terminates



e = t s a
a = x v

===================================================================================
lcnv
===================================================================================
例
--------------------------------
alias		runningTask				(type=Task,state=RUNNING)
alias		runnableTasks			(type=Task,state=RUNNABLE)
alias		dormantTasks			(type=Task,state=DORMANT)
alias		waitingTasks			(type=Task,state=WAITING)
alias		waitingSuspendedTasks	(type=Task,state=WAITING-SUSPENDED)
alias		suspendedTasks			(type=Task,state=SUSPENDED)

behavior	(runningTask).preempted						(self).state=RUNNABLE
behavior	(runningTask).wait							(self).state=WAITING
behavior	(runningTask).exit							(self).state=DORMANT
behavior	(dormantTasks).activate						(self).state=RUNNABLE
behavior	(runnableTasks).dispatch					(self).state=RUNNING
behavior	(runnableTasks).suspend						(self).state=SUSPENDED
behavior	(runnableTasks).terminate					(self).state=DORMANT
behavior	(waitingTasks).suspend						(self).state=WAITING-SUSPENDED
behavior	(waitingTasks).releaseFromWaiting			(self).state=RUNNABLE
behavior	(waitingTasks).terminate					(self).state=DORMANT
behavior	(waitingSuspendedTasks).resume				(self).state=WAITING
behavior	(waitingSuspendedTasks).releaseFromWaiting	(self).state=SUSPENDED
behavior	(waitingSuspendedTasks).terminate			(self).state=DORMANT
behavior	(suspendedTasks).resume						(self).state=RUNNABLE
behavior	(suspendedTasks).terminate					(self).state=DORMANT

replace		\[(?<time>\d+)\] dispatch to task (?<taskId>\d+)\.
			[${time}](runningTask).preempted
			[${time}](type=Task,id=${taskId}).dispatch

replace		\[(?<time>\d+)\] task (?<taskId>\d+) becomes (?<state>\w+)\.
			[${time}](type=Task,id=${taskId}).state=${state}


BNF（終端記号に正規表現）
--------------------------------
<rule>	::= "alias"<arg><arg>|"behavior"<arg><arg>|"replace"<args>
<args>	::= <arg><args>|<empty>
<arg>	::= <enter><tabs><value>

<empty>	::=	/^$/
<type>	::= /^(alias|behavior|replace)$/
<tabs>	::= /^\t+$/
<enter>	::= /^\n?$/
<value>	::= /^[^\t\n]+$/

正規表現
--------------------------------
/((alias(\n?\t+[^\t\n]+){2})|(behavior(\n?\t+[^\t\n]+){2})|(replace(\n?\t+[^\t\n]+)+))/
/(?:(?:(?<type>alias)(?:\n?\t+([^\t\n])+){2})|(?:(?<type>behavior)(?:\n?\t+([^\t\n])+){2})|(?:(?<type>replace)(?:\n?\t+([^\t\n])+)+))/


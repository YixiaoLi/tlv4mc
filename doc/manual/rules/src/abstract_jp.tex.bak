近年，マルチプロセッシングシステムの利用が進んでいる．
その背景には，シングルプロセッサの高クロック化による性能向上効果の停滞や，消費電力の増大がある．
マルチプロセッシングシステムでは処理の並列性を高めることにより性能向上を実現するため，消費電力の増加を抑えることが出来る．
しかし，マルチコアプロセッサ環境で動作するソフトウェアは，デバッグが困難であるという問題がある．
これは，処理の並列性から，従来のブレークポイントやステップ実行を用いたデバッグが有効でないからである．

一方，マルチコアプロセッサ環境で有効なデバッグ手法として，プログラム実行履歴であるトレースログを解析する手法がある．
これは，プログラムの実行中に，デバッグの判断材料となる情報をログとして記録し，実行後に解析してプログラムの動作を確認する手法である．
しかしながら，開発者が直接トレースログを解析するのは効率が悪い．
これは，膨大な量となるログから所望の情報を探し出すのが困難であることや，各コアのログが時系列に分散して記録されるため，逐次的にログを解析することが困難であることが理由である．

トレースログの解析を支援する手法として，ツールによるトレースログの可視化がある．
既存のトレースログを可視化するツールとしては，組み込みシステム向けデバッガソフトウェアや統合開発環境の一部，Unix系OSのトレースログ可視化ツールなどがある．
しかし，これら既存のツールは，トレースログが標準化されていないため対象が特定のOSやプロセッサに限定されており，汎用性に乏しい．
また，可視化表示項目が提供されているものに限られ，追加や変更が容易ではないなど，拡張性に乏しい．

そこで我々は，これらの問題点を解決し，汎用性，拡張性を備えたトレースログ可視化ツールを開発することを目的とし，TraceLogVisualizer (TLV) を開発した．
その過程で，トレースログを一般化し，標準形式トレースログを提案した．
また，トレースログを可視化する仕組みを可視化ルールとして形式化した．
TLVは，任意の形式のトレースログを標準形式トレースログに変換する仕組みを提供することにより，汎用性を実現している．
また，可視化表示項目を可視化ルールとしてプラグイン化することで拡張性を実現している．

開発したTLVは，シングルコアプロセッサ用RTOSやマルチコアプロセッサ用RTOS，組込みコンポーネントシステムなど，様々なトレースログを可視化表示することで汎用性の確認を行った．
また，可視化表示項目を目的に合わせて変更，追加出来ることを示し拡張性があることを確認した．

TLVの開発は，OJL(On the Job Learning)形式で行い，ユースケース駆動アジャイル開発というソフトウェア開発プロセスを用いて実施された．

/*
 *  TLV - Trace Log Visualizer
 *
 *  Copyright (C) 2008,2009 by Embedded and Real-Time Systems Laboratory
 *              Graduate School of Information Science, Nagoya Univ., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 *
 *  @(#) $Id$
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NU.OJL.MPRTOS.TLV.Base
{
	public class ObservableMultiKeyDictionary<T> : ObservableDictionary<string, T>
	{
		public void SetValue(T value, params string[] name)
		{
			if (!this.ContainsKey(name))
				base.Add(arrayToString(name), value);
			else if (!base[arrayToString(name)].Equals(value))
				base[arrayToString(name)] = value;
		}
		public T GetValue(params string[] name)
		{
			return base[arrayToString(name)];
		}
		public bool ContainsKey(params string[] name)
		{
			return base.ContainsKey(arrayToString(name));
		}
		public IEnumerable<KeyValuePair<string[], T>> GetMultiKeyEnumeralor()
		{
			return this.Select(kvp =>
			{
				if (kvp.Key.Contains(':'))
				{
					string[] data = kvp.Key.Split(':');
					return new KeyValuePair<string[], T>(data, kvp.Value);
				}
				else
				{
					return new KeyValuePair<string[], T>(new string[] { kvp.Key }, kvp.Value);
				}
			});
		}
		private string arrayToString(params string[] name)
		{
			StringBuilder result = new StringBuilder();
			foreach (string str in name)
			{
				result.Append(str);
				result.Append(":");
			}
			result.Remove(result.Length - 1, 1);
			return result.ToString();
		}
	}
}
